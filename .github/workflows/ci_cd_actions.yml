name: "CI CD actions"
on:
  push:
    tags:
      - 'v*'
    branches:
      - Test
      - Prod
  pull_request:
    branches:
      - Test
      - Prod
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write

jobs:
  test:
    name: Unit testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run tests
        run: |
          source .venv/bin/activate
          poetry run coverage run -m unittest discover -s tests
          poetry run coverage xml -i
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
  sonarcloud:
    name: SonarCloud code analyze
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.ref_type == 'branch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  lint:
    name: Code style check
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: TrueBrain/actions-flake8@v2
        with:
          only_warn: 1
          max_line_length: 80
          extra_arguments: "--max-complexity=10"
  test_deploy:
    name: Test deploy
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'push' && github.ref == 'refs/heads/Test'
    steps:
    - name: executing remote ssh commands
      uses: fjogeleit/http-request-action@v1.16.1
      with:
        url: ${{ secrets.URL_WEBHOOK_TEST }}
        method: 'POST'
  prod_deploy:
    name: Prod deploy
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: executing remote ssh commands
      uses: fjogeleit/http-request-action@v1.16.1
      with:
        url: ${{ secrets.URL_WEBHOOK_PROD }}
        method: 'POST'